/(!EnableAction:Grid.Clear,Grid.Insert,Grid.Remove,Grid.Update, SetState)

/(!StatesArea)
	/(!Action:Grid.Clear)
	"/(!NameID)": {
		"gridCols": /(!This:!jsonCols),
		"gridRows": /(!This:!jsonRows)
	},
	/(!Action)
	/(!Action:Grid.Insert)
	"/(!NameID)": {
		"gridCols": /(!This:!jsonCols),
		"gridRows": /(!This:!jsonRows)
	},
	/(!Action)
	/(!Action:Grid.Remove)
	"/(!NameID)": {
		"gridCols": /(!This:!jsonCols),
		"gridRows": /(!This:!jsonRows)
	},
	/(!Action)
	/(!Action:Grid.Update)
	"/(!NameID)": {
		"gridCols": /(!This:!jsonCols),
		"gridRows": /(!This:!jsonRows)
	},
	/(!Action)
/(!StatesArea)

/(!JSInit)
	/(!WebGrid-model.inc)
/(!JSInit)

/(!JS)
	/(!WebGrid-model.inc)
/(!JS)

/(!HiddenArea)
{
	xtype: "textfield",
	hidden: true,
	name: "/(!NameID)"
},
/(!HiddenArea)

{
	__dummy__: (function() {
		/(!NameID)_cols = [
			/(!AttachPoint:name=ColumnsArea:inlinetemplate:sep=,)
				{ colHeader: "/(!Text:htmlbr)",
				  dataType: "/(!Edit:!DataType)"
				}
			/(!EnableAction:SetState)
			/(!AttachPoint)
		];
	})(),
	
	xtype: "list",
	baseCls: "/(!Param:gridClass)",
	id: "/(!NameID)",
	name: "/(!NameID)",
	controlName: wcli.util.parseControlName("/(!Property:ControlName)"),
	flex: 1,
	onItemDisclosure: "/(!Param:disclose)" === "true",
	grouped: "/(!Param:grouped)" === "true",
	indexBar: "/(!Param:indexBar)" === "true",
	/(!If:/(!Param:renderTplGenerator))
		renderTpl: (/(!Param:renderTplGenerator))(/(!This:!jsonCols),/(!jsonColVis), /(!NameID)_cols, "/(!Param:grouped)" === "true", "/(!Param:gridClass)","/(!Param:rowClass)"),
	/(!If)
	itemTpl: (/(!If:/(!Param:tplGenerator))/(!Param:tplGenerator)/(!Else)wcli.util.gridTpl/(!If))(/(!This:!jsonCols),/(!jsonColVis),
				/(!NameID)_cols, "/(!Param:grouped)" === "true", "/(!Param:gridClass)","/(!Param:rowClass)","/(!Param:imgColNum)"),
	itemCls: "/(!Param:itemClass)",
	afterComponentLayout: function() {		
		Ext.Component.prototype.afterComponentLayout.apply(this);		
		if (typeof scrollerContainer == "undefined") {
			return;
		}
		var pageBox = this.el.parent().getPageBox();		
		this.scroller.container = scrollerContainer(pageBox);	
	},
	store: window["/(!NameID)_store"],
	disabled: "/(!Mode)" === "Read Only",
	listeners: {
		itemtap: {
			fn: function(view, index) {
				/(!If:/(!Event:phys=Select))
				index = view.getStore().getAt(index).get('$$idx$$');
				panel.setValues({ "/(!NameID)": index });
				panel.submit(wcli.util.evt("Select", "/(!NameID)"));
				/(!If)
			},
			scope: this
		},
		afterrender: {
			fn: function() {
				/(!If:/(!Event:phys=Load Grid))
				if(this.scroller){
					this.scroller.on('scrollend', function() {
						var offsetBoundary = this.scroller.offsetBoundary;
						var offset = this.scroller.offset;
						if (offset >= offsetBoundary || offset.y >= offsetBoundary.top) {
							panel.submit(wcli.util.evt("Load Grid", "/(!NameID)"));
						}
					}, this);
				}
				/(!If)
			},
		}
	}
},